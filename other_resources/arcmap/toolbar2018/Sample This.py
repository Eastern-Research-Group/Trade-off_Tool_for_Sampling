# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Sample This.py
# Created on: 2018-01-05 14:07:41.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Sample This <Samples> <Contamination_Map> <Output_table> 
# Description: 
# ---------------------------------------------------------------------------

# Import system modules
import arcpy, os, csv
from arcpy import env
from arcpy.sa import *

#allow overwrite
arcpy.env.overwriteOutput = True

# Script arguments
Samples = arcpy.GetParameterAsText(0)
Contamination_Map = arcpy.GetParameterAsText(1)
Root = arcpy.GetParameterAsText(2)
AOI_Area = arcpy.GetParameterAsText(3)
Available_Teams = arcpy.GetParameterAsText(4)
Personnel = arcpy.GetParameterAsText(5)
Hours_per_Shift = arcpy.GetParameterAsText(6)
Shifts_per_Day = arcpy.GetParameterAsText(7)
Labor_Cost = arcpy.GetParameterAsText(8)
Sampling_Labs = arcpy.GetParameterAsText(9)
Analysis_Hours = arcpy.GetParameterAsText(10)
Filename = "output.dbf"

Output = os.path.join(Root, Filename)

# Set environment settings
env.workspace = "C:/sapyexamples/data"

# Set local variables
inZoneData = Samples
zoneField = "FID"
inValueRaster = Contamination_Map


# Check out the ArcGIS Spatial Analyst extension license
arcpy.CheckOutExtension("Spatial")

# Execute ZonalStatisticsAsTable
# Contaminaton results join
if Contamination_Map:
        outZSaT = ZonalStatisticsAsTable(inZoneData, zoneField, inValueRaster, 
                                         Output, "NODATA", "MEAN")
else:
        pass

#not sure if this is needed, but give a unique count of sample methods...
#row_count = len(list(i for i in arcpy.da.SearchCursor(Samples, 'TYPE', "TYPE = 'Wet Vac'")))
#arcpy.AddMessage(row_count)
#row_count = len(list(i for i in arcpy.da.SearchCursor(Samples, 'TYPE', "TYPE = 'Robot'")))
#arcpy.AddMessage(row_count)
#row_count = len(list(i for i in arcpy.da.SearchCursor(Samples, 'TYPE', "TYPE = 'Aggressive Air'")))
#arcpy.AddMessage(row_count)

# Define actual area
exp = "!SHAPE.AREA@SQUAREINCHES!"
arcpy.CalculateField_management(Samples, "AA", exp, "PYTHON_9.3")

# Count the numner of interations exist in user define samples areas

fields_in_cursor = ["SA","AA","AC"]
with arcpy.da.UpdateCursor(Samples, fields_in_cursor) as cursor:
    for row_field_Name in cursor:
            row_field_Name[2] = row_field_Name[1]/row_field_Name[0]
            if row_field_Name[1] < row_field_Name[0]:
                row_field_Name[2] = 1
            else:
                pass
            cursor.updateRow(row_field_Name)

fields_in_cursor = ["TTPK","TTC","TTA","TTPS","MCPS","TCPS","WVPS","WWPS","AC","ITER"]
with arcpy.da.UpdateCursor(Samples, fields_in_cursor) as cursor:
    for row_field_Name in cursor:
            if row_field_Name[9] == 0:
                    row_field_Name[0] = row_field_Name[0]*row_field_Name[8]
                    row_field_Name[1] = row_field_Name[1]*row_field_Name[8]
                    row_field_Name[2] = row_field_Name[2]*row_field_Name[8]
                    row_field_Name[3] = row_field_Name[3]*row_field_Name[8]
                    row_field_Name[4] = row_field_Name[4]*row_field_Name[8]
                    row_field_Name[5] = row_field_Name[5]*row_field_Name[8]
                    row_field_Name[6] = row_field_Name[6]*row_field_Name[8]
                    row_field_Name[7] = row_field_Name[7]*row_field_Name[8]
                    row_field_Name[9] = row_field_Name[9]+1
            else:
                    pass
            cursor.updateRow(row_field_Name)

# Probability
AA_Total = 0
# Convert User Input Area to Inches(^2)
AOI_Area = float (AOI_Area) * 144
with arcpy.da.SearchCursor(Samples, "AA") as p:
        for row in p:
                AA_Total = AA_Total + row[0]
Prob = float(AA_Total) / float(AOI_Area) * 100 
arcpy.AddMessage("Total AOI Area: " + str(AOI_Area))
arcpy.AddMessage("Total Sampled Area :" + str(AA_Total))

TTPK_total = 0
TTC_total = 0
TTA_total = 0
TTPS_total = 0
LOD_P_total = 0
LOD_NON_total = 0
MCPS_total = 0
TCPS_total = 0
WVPS_total = 0
WWPS_total = 0
SA_total = 0

with arcpy.da.SearchCursor(Samples, "TTPK") as a, arcpy.da.SearchCursor(Samples, "TTC") as b, arcpy.da.SearchCursor(Samples, "TTA") as c, arcpy.da.SearchCursor(Samples, "TTPS") as d, arcpy.da.SearchCursor(Samples, "LOD_P") as e, arcpy.da.SearchCursor(Samples, "LOD_NON") as f, arcpy.da.SearchCursor(Samples, "MCPS") as g, arcpy.da.SearchCursor(Samples, "TCPS") as h, arcpy.da.SearchCursor(Samples, "WVPS") as i, arcpy.da.SearchCursor(Samples, "WWPS") as j, arcpy.da.SearchCursor(Samples, "SA") as k:
    for row in a:
        TTPK_total = TTPK_total + row[0]
    for row in b:
        TTC_total = TTC_total + row[0]
    for row in c:
        TTA_total = TTA_total + row[0]
    for row in d:
        TTPS_total = TTPS_total + row[0]
    for row in e:
        LOD_P_total = LOD_P_total + row[0]
    for row in f:
        LOD_NON_total = LOD_NON_total + row[0]
    for row in g:
        MCPS_total = MCPS_total + row[0]
    for row in h:
        TCPS_total = TCPS_total + row[0]
    for row in i:
        WVPS_total = WVPS_total + row[0]
    for row in j:
        WWPS_total = WWPS_total + row[0]
    for row in k:
        SA_total = SA_total + row[0]

# Contaminaton results join if contamination map availavle
if Contamination_Map:
        arcpy.AddMessage('Contamination Detected')
        inFeatures = Samples
        joinField = "FID"
        joinField_table = "FID_"
        joinTable = Output
        fieldList = ["MEAN"]
        # Delete MEAN if it exists
        arcpy.DeleteField_management(inFeatures, "MEAN")
        # Join MEAN to Sample results
        arcpy.JoinField_management (inFeatures, joinField, joinTable, joinField_table, fieldList)
else:
        pass

#Calculate Sampling Resource Demand
#Available_Teams = arcpy.GetParameterAsText(4)
#Personnel = arcpy.GetParameterAsText(5)
#Hours_per_Shift = arcpy.GetParameterAsText(6)
#Shifts_per_Day = arcpy.GetParameterAsText(7)
#Labor_Cost = arcpy.GetParameterAsText(8)

Sampling_Hours = int(Available_Teams) * int(Hours_per_Shift) * int(Shifts_per_Day)
Sampling_Personnel_Day = int(Sampling_Hours) * int(Personnel)
Sampling_Personnel_Labor_Cost = int(Labor_Cost) * int(Personnel)

arcpy.AddMessage('Time To Complete Sampling')
Time_Complete_Sampling = float(TTC_total)/float(Sampling_Hours)

Total_Sampling_Labor_Cost = float(Available_Teams) * float(Personnel) * float(Hours_per_Shift) * float(Shifts_per_Day) * float(Sampling_Personnel_Labor_Cost) * float(Time_Complete_Sampling)

# Calculate Lab Throughput
Total_Hours = int(Sampling_Labs)*int(Analysis_Hours)
Throughput_Time = TTA_total/Total_Hours

arcpy.AddMessage(" ")
arcpy.AddMessage("Results:")
arcpy.AddMessage(" ")
arcpy.AddMessage("Total Number of Samples: " + str(arcpy.GetCount_management(Samples).getOutput(0)))
arcpy.AddMessage("Probability of Finding a Hot Spot (Assuming No False Negative): " + str("{0:.0f}%".format(Prob)))
arcpy.AddMessage(" ")
arcpy.AddMessage("Time to Prepare Kits (person hours): " + str(TTPK_total))
arcpy.AddMessage("Time to Collect (person hours): " + str(TTC_total))
arcpy.AddMessage("Time to Analyze (person hours): " + str(TTA_total))
arcpy.AddMessage("Total Time(person hours)(kits + collection + analysis + shipping + reporting): " + str(TTPS_total))
#arcpy.AddMessage("Limit of Detection (CFU) Porous: " + str(LOD_P_total))
#arcpy.AddMessage("Limit of Detection (CFU) Nonporous: " + str(LOD_NON_total))
arcpy.AddMessage("Material Cost: " + str(MCPS_total))
#arcpy.AddMessage("Total Cost(Labor + Material + Waste): " + str(TCPS_total))
arcpy.AddMessage("Waste volume (L): " + str(WVPS_total))
arcpy.AddMessage("Waste Weight (lbs): " + str(WWPS_total))
arcpy.AddMessage("Sampled Area (inch): " + str(SA_total))
arcpy.AddMessage(" ")
arcpy.AddMessage("Sampling")
arcpy.AddMessage("User Specified Number of Available Teams for Sampling: " + str(Available_Teams))
arcpy.AddMessage("User Specified Personnel per Sampling Team: " + str(Personnel))
arcpy.AddMessage("User Specified Sampling Team Hours per Shift: " + str(Hours_per_Shift))
arcpy.AddMessage("User Specified Sampling Team Shifts per Day: " + str(Shifts_per_Day))
arcpy.AddMessage("Sampling Hours per Day: " + str(Sampling_Hours))
arcpy.AddMessage("Sampling Personnel hours per Day: " + str(Sampling_Personnel_Day))
arcpy.AddMessage("User Specified Sampling Team Labor Cost ($): " + str(Labor_Cost))
arcpy.AddMessage("Sampling Personnel Labor Cost ($): " + str(Sampling_Personnel_Labor_Cost))
arcpy.AddMessage("Time to Complete Sampling (days): " + str(Time_Complete_Sampling))
arcpy.AddMessage("Total Sampling Labor Cost ($): " + str(Total_Sampling_Labor_Cost))
arcpy.AddMessage(" ")
arcpy.AddMessage("Analysis")
arcpy.AddMessage("User Specified Number of Available Labs for Analysis: " + str(Sampling_Labs))
arcpy.AddMessage("User Specified Analysis Lab Hours per Day: " + str(Analysis_Hours))
arcpy.AddMessage("Time to Complete Analyses (days): " + str(Throughput_Time))
arcpy.AddMessage(" ")

# Write to spreadsheet
with open(os.path.join(Root, 'output.csv'),'w+') as csvfile:  
        csvwriter = csv.writer(csvfile, delimiter=',', lineterminator='\n')
        csvwriter.writerow(["Summary"])
        csvwriter.writerow(['Total number of samples: '] + [arcpy.GetCount_management(Samples).getOutput(0)])
        csvwriter.writerow(['Time to Prepare Kits (person hours): '] + [str(TTPK_total)])
        csvwriter.writerow(["Time to Collect (person hours): "] + [str(TTC_total)])
        csvwriter.writerow(["Time to Analyze (person hours): "] + [str(TTA_total)])
        csvwriter.writerow(["Total Time(person hours)(kits + collection + analysis + shipping + reporting): "] + [str(TTPS_total)])
        csvwriter.writerow(["Material Cost: "] + [str(MCPS_total)])
#        csvwriter.writerow(["Total Cost (Labor + Material + Waste): "] + [str(TCPS_total)])
        csvwriter.writerow(["Waste volume (L): "] + [str(WVPS_total)])
        csvwriter.writerow(["Waste Weight (lbs): "] + [str(WWPS_total)])
        csvwriter.writerow([""])        
        csvwriter.writerow(["Sampling"])
        csvwriter.writerow(["User Specified Number of Available Teams for Sampling: "] + [str(Available_Teams)])
        csvwriter.writerow(["User Specified Personnel per Sampling Team: "] + [str(Personnel)])
        csvwriter.writerow(["User Specified Sampling Team Hours per Shift: "] + [str(Hours_per_Shift)])
        csvwriter.writerow(["User Specified Sampling Team Shifts per Day: "] + [str(Shifts_per_Day)])
        csvwriter.writerow(["Sampling Hours per Day: "] + [str(Sampling_Hours)])
        csvwriter.writerow(["Sampling Personnel hours per Day: "] + [str(Sampling_Personnel_Day)])
        csvwriter.writerow(["User Specified Sampling Team Labor Cost ($): "] + [str(Labor_Cost)])
        csvwriter.writerow(["Sampling Personnel Labor Cost ($): "] + [str(Sampling_Personnel_Labor_Cost)])
        csvwriter.writerow(["Time to Complete Sampling (days): "] + [str(Time_Complete_Sampling)])
        csvwriter.writerow(["Total Sampling Labor Cost ($): "] + [str(Total_Sampling_Labor_Cost)])
        csvwriter.writerow([""])        
        csvwriter.writerow(["Analysis"])        
        csvwriter.writerow(["User Specified Number of Available Labs for Analysis: "] + [str(Sampling_Labs)])
        csvwriter.writerow(["User Specified Analysis Lab Hours per Day: "] + [str(Analysis_Hours)])
        csvwriter.writerow(["Time to Complete Analyses (days)"] + [str(Throughput_Time)])        
        csvwriter.writerow([""])
        # Contaminaton results join
        ## Write data depending on availability of contamination map 
        if Contamination_Map:
                fields = ['FID','MEAN','Notes']
                fields_com = ['Sample ID','LOG CFU','Notes']         
                csvwriter.writerow(fields_com)       
                with arcpy.da.SearchCursor(Samples, fields) as s_cursor:  
                        for row in s_cursor:  
                                csvwriter.writerow(row)
        else:
                fields = ['FID','Notes']
                fields_com = ['Sample ID','Notes']
                csvwriter.writerow(fields_com)                
                with arcpy.da.SearchCursor(Samples, fields) as s_cursor:  
                        for row in s_cursor:  
                                csvwriter.writerow(row)                
